#!/bin/bash

# fc カレントディレクトリ配下のディレクトリを絞り込んで移動
function find_cd () {
  cd "$(find . -type d | peco)"

  return $?
}

# fv カレントディレクトリ配下のファイルを絞り込んでvimで開く
function find_vim () {
  SELECT_FILE=$(find . -type f | peco)

  if [ "$SELECT_FILE" != "" ]; then
    vim $SELECT_FILE
  fi

  return $?
}

# git change branch
function peco-git-branch () {
  for branch in `git branch | grep -v "*" | peco`
  do
    git checkout $branch
  done

  return $?
}

# pecoでcd移動
function peco-cd () {
  local sw="1"
  while [ "$sw" != "0" ]
  do
		if [ "$sw" = "1" ]; then
			local list=$(echo -e "---$PWD\n../\n$( ls -F | grep / )\n---Show hidden directory\n---Show files, $(echo $(ls -F | grep -v / ))\n---HOME DIRECTORY")
		elif [ "$sw" = "2" ]; then
			local list=$(echo -e "---$PWD\n$( ls -a -F | grep / | sed 1d )\n---Hide hidden directory\n---Show files, $(echo $(ls -F | grep -v / ))\n---HOME DIRECTORY")
		else
			local list=$(echo -e "---BACK\n$( ls -F | grep -v / )")
		fi

		local slct=$(echo -e "$list" | peco )

		if [ "$slct" = "---$PWD" ]; then
			local sw="0"
		elif [ "$slct" = "---Hide hidden directory" ]; then
			local sw="1"
		elif [ "$slct" = "---Show hidden directory" ]; then
			local sw="2"
		elif [ "$slct" = "---Show files, $(echo $(ls -F | grep -v / ))" ]; then
			local sw=$(($sw+2))
		elif [ "$slct" = "---HOME DIRECTORY" ]; then
			cd "$HOME"
		elif [[ "$slct" =~ / ]]; then
			cd "$slct"
		elif [ "$slct" = "" ]; then
			:
		else
			local sw=$(($sw-2))
		fi
  done
}

# pk プロセスを選択してkill
function peco-pkill () {
  for pid in `ps aux | peco | awk '{ print $2 }'`
  do
    kill -9 $pid
    echo "Killed ${pid}"
  done

  return $?
}

# his bash_historyを選択して実行
function peco-history () {
  SELECTED_COMMAND=$(tac $HOME/.bash_history | peco)
  if [ "$SELECTED_COMMAND" != "" ]; then
    echo "exec: ${SELECTED_COMMAND}"
    eval $SELECTED_COMMAND
  fi

  return $?
}

function peco-sort-history () {
  SELECTED_COMMAND=$(sort -k1 -g $HOME/.bash_history | peco)
  if [ "$SELECTED_COMMAND" != "" ]; then
    echo "exec: ${SELECTED_COMMAND}"
    eval $SELECTED_COMMAND
  fi

  return $?
}

function peco-find () {
  if [ $# -eq 0 ]; then
    find . -type d | peco
  else
    find $1 | peco
  fi

  return $?
}

function peco-findd () {
  if [ $# -eq 0 ]; then
    finded=`find . | peco`
  else
    finded=`find $1 | peco`
  fi
  if [ -f $finded ]; then
    echo $finded | perl -pe 's/\/[^\/]*$/\n/g'
  else
    echo $finded
  fi

  return $?
}

function peco-file-cat () {
  if [ -z $1 ]; then
    file=$(peco-find $1)
    cat $file
  else
    echo "it couldn't work by no argument."
  fi

  return $?
}

function peco-directory-ls () {
  if [ -z $1 ]; then
    file=$(peco-find $1)
    ls $file
  else
    echo "it couldn't work by no argument."
  fi

  return $?
}

# function peco-directory-cd () {
#   if [ -z $1 ]; then
#     dir=$(peco-find-file-before-directory $1)
#     cd $dir
#   else
#     echo "it couldn't work by no argument."
#   fi
#
#   return $?
# }

# cd alias function
# function cdls () {
#   \cd "$@" && ls
#
#   return $?
# }

# disable keyboard
function disable_keyboard () {
  sudo input-kbd -f $HOME/disable-all.map 3

  return $?
}

# enable keyboard
function enable_keyboard () {
  sudo input-kbd -f $HOME/keyboard_setting/default.map 3

  return $?
}

# web container attach
function web_container_attach() {
  process=`docker-compose ps -q web`

  if [ -n "$process" ]; then
    docker attach $process
  fi

  return $?
}

# prompt
function my_prompt() {
  branch=`git branch 2>&1 > /dev/null`

  if [ $? = 0 ]; then
    branch_name=`git rev-parse --abbrev-ref HEAD`

    export PS1="\[\e[1;36m\]\w\[\e[m\] \[\e[0;35m\]${branch_name}\[\e[m\]* \n% "
  else
    export PS1='\[\e[1;36m\]\w\[\e[m\] \n% '
  fi

  return $?
}

# ================================ git ================================
# my branch
function my_git_branch () {
  git rev-parse --abbrev-ref HEAD

  return $?
}

function current_branch () {
  git branch

  return $?
}

# git checkout develop or dev
function switch_dev () {
  checkout=`git checkout develop 2>&1 > /dev/null`

  if [ $? = 0 ]; then
    echo "change branch develop."
  else
    echo "develop branch did not exist."
    checkout=`git checkout development 2>&1 > /dev/null`

    if [ $? = 0 ]; then
      echo "change branch development."
    else
      echo "development branch did not exist."
      checkout=`git checkout dev 2>&1 > /dev/null`

      if [ $? = 0 ]; then
        echo "change branch dev."
      else
        echo "can't change branch.\n"
        echo "Probably due to the following error (Please commit your changes or stash them before you switch branches)."
      fi
    fi
  fi

  return $?
}

# git pull current branch
function g () {
  branch=`git rev-parse --abbrev-ref HEAD`
  if [ "$(uname)" == 'Darwin' ]; then
    rsa_path=`mdfind -name github_rsa | grep -v pub | grep ssh`
  else
    rsa_path=`locate -b -r "^github_rsa$"`
  fi

  expect -c "
    set timeout 10
    spawn bash -c \"git $1 origin $branch\"
    expect {
      \"Username for 'https://github.com': \" {
        send \"$GITHUB_NAME\n\"; exp_continue
        expect \"Password for 'https://$GITHUB_NAME@github.com': \"
        send \"$GITHUB_PASSWORD\n\"; exp_continue
      }
      \"Enter passphrase for key '$rsa_path':\" {
        send \"$SSH_PASSWORD\n\"; exp_continue
      }
    }
  "

  return $?
}

# git checkout branch name
function gcheckout() {
  git checkout $@

  return $?
}

function switch_master() {
  checkout=`git checkout master 2>&1 > /dev/null`

  if [ $? = 0 ]; then
    echo "change branch master."
  else
    echo "master branch did not exist."
    git checkout main
    if [ $? = 0 ]; then
      echo "change branch main."
    fi
  fi


  return $?
}

function specific_docker_volume_rm() {
  arg=$1

  if [ -z "$arg" ]; then
    echo "volumeを指定して下さい。"
  else
    docker volume ls | grep "$arg" > volume.txt

    if [ -n "$(cat volume.txt)" ]; then
      cat volume.txt | awk '{print $2}' | xargs docker volume rm
    else
      echo "$argのvolumeは存在しません。"
    fi
  fi

  return $?
}

# tmux
# named tmux function
function ttmux () {
  if [ -z $1 ]; then
    tmux
  else
    tmux new -s $1
  fi

  return $?
}

# named attach tmux function
function tmux-attached () {
  if [ -z $1 ]; then
    tmux a
  else
    tmux a -t $1
  fi

  return $?
}

# peco select tmux session
function tmux-session () {
  for session in `tmux list-sessions | peco | awk '{ print $1 }' | tr -d ':'`
  do
    tmux a -t $session
  done

  return $1
}

# tmux session kill all
function tmux-kill-session-all () {
  tmux kill-session
  echo "all tmux session killed"

  return $1
}


